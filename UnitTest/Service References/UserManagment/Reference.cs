//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnitTest.UserManagment {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserManagment.IUserManagment")]
    public interface IUserManagment {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagmentUnsecure/AddUser", ReplyAction="http://tempuri.org/IUserManagmentUnsecure/AddUserResponse")]
        void AddUser(DomainModel.Models.User a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagmentUnsecure/AddUser", ReplyAction="http://tempuri.org/IUserManagmentUnsecure/AddUserResponse")]
        System.Threading.Tasks.Task AddUserAsync(DomainModel.Models.User a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagmentUnsecure/IsEmailInDB", ReplyAction="http://tempuri.org/IUserManagmentUnsecure/IsEmailInDBResponse")]
        bool IsEmailInDB(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagmentUnsecure/IsEmailInDB", ReplyAction="http://tempuri.org/IUserManagmentUnsecure/IsEmailInDBResponse")]
        System.Threading.Tasks.Task<bool> IsEmailInDBAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagment/Login", ReplyAction="http://tempuri.org/IUserManagment/LoginResponse")]
        void Login();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagment/Login", ReplyAction="http://tempuri.org/IUserManagment/LoginResponse")]
        System.Threading.Tasks.Task LoginAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagment/ChangePass", ReplyAction="http://tempuri.org/IUserManagment/ChangePassResponse")]
        void ChangePass(string login, string newpass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagment/ChangePass", ReplyAction="http://tempuri.org/IUserManagment/ChangePassResponse")]
        System.Threading.Tasks.Task ChangePassAsync(string login, string newpass);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserManagmentChannel : UnitTest.UserManagment.IUserManagment, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserManagmentClient : System.ServiceModel.ClientBase<UnitTest.UserManagment.IUserManagment>, UnitTest.UserManagment.IUserManagment {
        
        public UserManagmentClient() {
        }
        
        public UserManagmentClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserManagmentClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagmentClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagmentClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddUser(DomainModel.Models.User a) {
            base.Channel.AddUser(a);
        }
        
        public System.Threading.Tasks.Task AddUserAsync(DomainModel.Models.User a) {
            return base.Channel.AddUserAsync(a);
        }
        
        public bool IsEmailInDB(string userName) {
            return base.Channel.IsEmailInDB(userName);
        }
        
        public System.Threading.Tasks.Task<bool> IsEmailInDBAsync(string userName) {
            return base.Channel.IsEmailInDBAsync(userName);
        }
        
        public void Login() {
            base.Channel.Login();
        }
        
        public System.Threading.Tasks.Task LoginAsync() {
            return base.Channel.LoginAsync();
        }
        
        public void ChangePass(string login, string newpass) {
            base.Channel.ChangePass(login, newpass);
        }
        
        public System.Threading.Tasks.Task ChangePassAsync(string login, string newpass) {
            return base.Channel.ChangePassAsync(login, newpass);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserManagment.IUserManagmentUnsecure")]
    public interface IUserManagmentUnsecure {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagmentUnsecure/AddUser", ReplyAction="http://tempuri.org/IUserManagmentUnsecure/AddUserResponse")]
        void AddUser(DomainModel.Models.User a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagmentUnsecure/AddUser", ReplyAction="http://tempuri.org/IUserManagmentUnsecure/AddUserResponse")]
        System.Threading.Tasks.Task AddUserAsync(DomainModel.Models.User a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagmentUnsecure/IsEmailInDB", ReplyAction="http://tempuri.org/IUserManagmentUnsecure/IsEmailInDBResponse")]
        bool IsEmailInDB(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagmentUnsecure/IsEmailInDB", ReplyAction="http://tempuri.org/IUserManagmentUnsecure/IsEmailInDBResponse")]
        System.Threading.Tasks.Task<bool> IsEmailInDBAsync(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserManagmentUnsecureChannel : UnitTest.UserManagment.IUserManagmentUnsecure, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserManagmentUnsecureClient : System.ServiceModel.ClientBase<UnitTest.UserManagment.IUserManagmentUnsecure>, UnitTest.UserManagment.IUserManagmentUnsecure {
        
        public UserManagmentUnsecureClient() {
        }
        
        public UserManagmentUnsecureClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserManagmentUnsecureClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagmentUnsecureClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagmentUnsecureClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddUser(DomainModel.Models.User a) {
            base.Channel.AddUser(a);
        }
        
        public System.Threading.Tasks.Task AddUserAsync(DomainModel.Models.User a) {
            return base.Channel.AddUserAsync(a);
        }
        
        public bool IsEmailInDB(string userName) {
            return base.Channel.IsEmailInDB(userName);
        }
        
        public System.Threading.Tasks.Task<bool> IsEmailInDBAsync(string userName) {
            return base.Channel.IsEmailInDBAsync(userName);
        }
    }
}
